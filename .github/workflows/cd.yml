name: CD Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'production'

jobs:
  deploy:
    name: Build Docker Image and Deploy to EC2
    runs-on: ubuntu-24.04

    steps:
      - name: Check out Code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Extract Version
        id: extract-version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Log Extracted Version
        run: |
          echo "Extracted Version: ${{ env.VERSION }}"

    #   - name: Build and Tag Docker Image
    #     run: |
    #       docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/e-commerce:${{ github.sha }} .
    #       docker tag ${{ secrets.DOCKERHUB_USERNAME }}/e-commerce:${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }}/e-commerce:latest
  
    #   - name: Push Docker Image to Docker Hub
    #     run: |
    #       docker push ${{ secrets.DOCKERHUB_USERNAME }}/e-commerce:${{ github.sha }}
    #       docker push ${{ secrets.DOCKERHUB_USERNAME }}/e-commerce:latest

    #   - name: Configure AWS Credentials
    #     uses: aws-actions/configure-aws-credentials@v4
    #     with:
    #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #       aws-region: us-east-1

    #   - name: Deploy to EC2 via SSM
    #     run: |
    #       aws ssm send-command \
    #         --document-name "AWS-RunShellScript" \
    #         --targets "Key=instanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
    #         --parameters 'commands=[
    #           "docker pull ${{ secrets.DOCKERHUB_USERNAME }}/e-commerce:latest",
    #           "docker stop e-commerce || true",
    #           "docker rm e-commerce || true",
    #           "docker run -d --name e-commerce -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/e-commerce:latest"
    #         ]' \
    #         --timeout-seconds 600 \
    #         --comment "Deploying latest Docker image to EC2" \
    #         --output text